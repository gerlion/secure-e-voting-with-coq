let _ =

    (* At the moment we are being lazy and passing the data in directly, we need to switch more of it to external *)

  Format.printf "%s\n" "Loading data";

  let wikSigma = Lib.ElGamalWikstrom.coq_WikstromSigma in
  let wikStatment = Lib.ElGamalWikstrom.coq_WikstromStatment in
  
  Format.printf "%s\n" (Big_int.string_of_big_int Lib.p);
  Format.printf "%s\n" (Big_int.string_of_big_int Lib.q);

  let toVector2 = (fun x y ->
    Lib.Cons (Big_int.big_int_of_string x, (Lib.S Lib.O), Lib.Cons (Big_int.big_int_of_string y, Lib.O, Lib.Nil))
  ) in
  
  let toVector2Ciph = (fun x y z w ->
    Lib.Cons ((Big_int.big_int_of_string x,Big_int.big_int_of_string y), (Lib.S Lib.O), Lib.Cons ((Big_int.big_int_of_string z, Big_int.big_int_of_string w), Lib.O, Lib.Nil))
  ) in
  
  let rec intToNat = (fun i ->
    match i with
    | 0 -> Lib.O
    | x -> Lib.S (intToNat (x-1))
  ) in
  
  let rec toVectorNBaseString = (fun i (x : string list) ->
    match x with
    | [] -> Lib.Nil
    | z::zs -> Lib.Cons (Big_int.big_int_of_string z, i, (toVectorNBaseString (Lib.pred i) zs))
  ) in
  
  (* Converts a list of strings to a vector of big_ints *)
  let toVectorNString = (fun (x : string list) ->
    toVectorNBaseString (intToNat (List.length x)) x
  ) in
  
  let rec toVectorNBaseBig = (fun i (x : Big_int.big_int list) ->
    match x with
    | [] -> Lib.Nil
    | z::zs -> Lib.Cons (z, i, (toVectorNBaseBig (Lib.pred i) zs))
  ) in
  
  (* Converts a list of Big_ints to a vector of Big_ints *)
  let toVectorNBig = (fun (x : Big_int.big_int list) ->
    toVectorNBaseBig (intToNat (List.length x)) x
  ) in
  
  let jsonToBigint = (fun x ->
    let xString = Yojson.Basic.to_string x in
    let xStringClean = String.sub xString 1 (String.length xString - 2) in
    let xStringAppend = "0x"^xStringClean in
    Big_int.big_int_of_string xStringAppend
  ) in
  
  let toListOfElements = (fun x ->
    List.map jsonToBigint x
  ) in
  
  let rec toVectorNBaseCiph = (fun i x ->
    match x with
    | [] -> Lib.Nil
    | z::zs ->
    Lib.Cons ((jsonToBigint (fst z), jsonToBigint (snd z)), i, (toVectorNBaseCiph (Lib.pred i) zs))
  ) in
  
  (* Converts a list of strings to a vector of big_ints *)
  let toVectorNCiph = (fun x ->
    toVectorNBaseCiph (intToNat (List.length x)) x
  ) in

  (* Transcript *)
  let pk = (Big_int.big_int_of_string "2515475762534521600282139994689611469731614420168753437521509049233007907369598641022579498766562013097144822702421339515200877679600608650654415686415618", Big_int.big_int_of_string "3567574434592559324473307251553844135574798914845976010673619025245893857784843291409586212550699589540996849591685770660056429393204817241164317236651651") in
  let h = Big_int.big_int_of_string "2515475762534521600282139994689611469731614420168753437521509049233007907369598641022579498766562013097144822702421339515200877679600608650654415686415618" in
  let hs = toVectorNString ["6660792886182125639192801240886353990038814487094001267451571561382998923978861139006907487296827605597445661414513728576365563752607577121451628043358061";
  "3908344948622314304489762367965140301689725625801277445728610334317136507403515501796005715913186787544713952108871013951662916480521634941959451205728734";
  "1344412103356464733299184951094615616067276552869047175939959494766011413527262942870274477709787046757138645056244900405095489740438523937469621189560762";
  "3515239383425525290108563771410539566203840024974220355750091959871829759922376018065896328620232737165172058325421346659888305236614860284559786332152077";
  "6642540170562314443524443638711439528855945283627751504045016100532911024593494147046648712361948021142434799799435448066238793895232128229799783455252699";
  "7341559787319407185941915262575415033460734873900132775241086886004366024328407689078153545870998561552239519539520227068829558945645676958702683873980520";
  "2591904906794405696372763139962300598023715221314625522683751546841133548534905299837156420450422549291276209931788041877359200745717982114624587078327936";
  "785883148010770973859924718203386324350807826109410876225040963437270728119478047063465119779389006539635279543660472723712038622382585272832598552673570";
  "6846843609576551768535925450688272851738527931875689075139491379016496716759503557473786114367717358284052681083213056149022510939580011020590909499026572";
  "453009591959321153182179184013498006260438191504208795093414120277363510983415901642891765510298610917267262670964507553195698473855294327127600544024139";
  "6123788026326862337983073210061879187558115950366130924924242858160634086027697019103687923092947163778932098122129706185599861086947377057823924499478353";
  "4638833939294424183037006347645581713591424947818149483895357153823973101136436197772225095063796009171644385855884789576731917903361625230626606375050864";
  "6162052985591375844179386305955889605801279410144722545488918595156313401271657943800275959778898808291313730078653913058228913358762645621908932994724262";
  "6307525768689871321869486534008506445699184804561129783326134105834530826564841272913002342446693003910139053619681368430242140363196914086556505811465660";
  "5587383975307272677670805818535033016641922115022482817625828138739626167238001276771955755262035674888550779440960288634360277067492001862916331628250534";
  "3365540529755272855792267364823020894949588378421284169031001261475817988649203164091042569998141885972012196331518230677999067804385721702347549302633912";
  "467910435824035623486194341464925707515751646177168248857563401412801792588642075711710594929483315422486586720720449429346548223534154830725734129215588";
  "235602383560212357015513125129395892025014590937127685977612971447362763453612198232529056658390513931931588675721698084061651654455316611776500893449174";
  "4750882039668544002584465990472050235011367095328656034476720185902019304531006465553373025322036297449253836411087120159574030686133124024550255689427121";
  "2669113608570706071102278034164590637643554974451808523798440995234581371650148420143256835696549542822495160420146492161612297161193343089929330221389894";
  "1132971806176945291284329780659689994511164284456761832639262365516046174445631599537690442377358084962464738007797440022807460244842221700583551064212727";
  "4188602518418283533830064921837245910919071844621354351351548946505303083109241800136102683084578860968631923509969415951617479970457676938751200558641459";
  "7524612978538160514059530474798381904315506992353502124913114168058477428036047286411231261731689327154573340907202799510161029027418449418688640287577956";
  "4845292072625918702683760633164699672867836703663769432331400879685032977583083239105807196792716363687989250448424458830859458509781553791515329100259310";
  "6807088577753044026864554458483039238105372043480445514186999670867830039605367396380273412280419740162560116353280936428919212564914035288516614514508617";
  "7778400553349536556896988465667311690625984816838768061093749038466894670267043386476806291981685566699586852815476542626929001060239080343603999033063226";
  "5703411592989305354009112831696150803560422516920087168103079911350110809579284664085325507428370282142528923107092199910224872878438401806515205302207885";
  "5156083334563817369282010745660009740401899277892735318206847748940192665986776818176883769705883264063146368946812016549200562374032725197898147383568337";
  "6093978335131154514826146616051217150906234524332655556046875132400620963076243089881916826866591672042469687633598994139192398050008484972877327693998579";
  "583320729520712863814583086866134613320941014466554355430721027048156828073430625449264452650647935153747522787309880842067888344604640408705136475930346";
  "8015561981358779181215086191886116407325260286649253874080303925922005788222132124370733421077154490755986103100472019818665542620051449691930506699506263";
  "6318407893351790780907932330995373027078718708655329880409351192748011970950419376832837821215915765258202826491297716082417482552290465072754875937355175";
  "6837646789079224945179168334548085988419289442422457678664650594495590815978878172124417602874161092086671057699902511854448606570724735485562858718083466";
  "6508760254308515035515439849989369372036964626703719634527933641363192148174658491555859964845522824478754115824974185481106848435246090666218391563973896";
  "5278837651933366937747099971695129094680024775092418573756332803556866725364585789403825334098722308862879593039955514129997715382782342609791712705414972";
  "2903084898751000320359403630414664951764014068309071653303117548990716426429530662693080855512674619725086045693747859119875758979529604834170217060225892";
  "7045420711894589169539695212668047769780889553423980016792667945257476145650530190673227503613598619760025192082684938795573428691604178024271865884386960";
  "4134157722833448965005862276349989817133546301098067383896491092003749441484625783922389274770917325656298212257309185815914009265080027664258138038820253";
  "905842043365966563366313961765144577668964772274076457277130036855292870909323394248518761437313219471436526965665254423944588039480125476039115745881992";
  "790141555990222096474606252042985986324840196039576573646600076467047856344823548645131264774577573253116941785912328477127904189448670119148964986906024";
  "3347305665210315152916899791107061253945384771701034574631440615336868545560944542742298679373806300659037238629116675086813395189341904318509293822207175";
  "4046304457190731211783149558441683815807408255769021718869640331433700318078560272048517848972790168479686600369363180573142116702036758818536322233803803";
  "2544603990687249288883353342831264757740670632022948930851673621230289236117083184152196461743045345342316898401490591087370473028954215111266249533921325";
  "4827205504083782959825793785587418959681870701340907648537437837863033446990529722509105305594566159222612700364304426498163307007971115128130483219769602";
  "6617467738091090733954865196672378897973766704510921875782881163898722760369169419301918824955373610430528873474920685305592741930448536326712717263880464";
  "886288609738712371008553982931683863699725408863104065833756068764225123763526220717790171522715302570079397153162881160129967633201360078342356531822274";
  "1957084056754002326424290990182627350037796103496694604856973059472957896252445098532819960340156468317990505346330367523996802960632113791465155649399437";
  "5809246894307649599990896086842629692116810699527086016491439488598932878913219532074405454258249651063376196789291717186549547389339377872986942820753809";
  "6820087189716453688098121078716768821603074428455070908775590093462791426652722370667527513945727285295392235052950257722965339522183033574563363376209595";
  "6381073503497616879870837808550626094089433562607158320586236945907804421515699569464206355263969445317790476981451918130488625389428191148224088333612716";
  "5680747368345378056297302840867175459200472117058637368134820337463537082602227862830458891598845951166450288199758981897513303971235120587294858541585308";
  "2971395770682309362897898625246599219504861876566645434553320418031116013236869917165062301991711606034914854500719993267731230641243084280789727789918978";
  "7053613724073574906373863982693276068835007997149050102351772143613142293972911676315879135857272282854230057850329592275273641084830911172188513036127970";
  "3584838163397690420274897362611305196166276902193555954005721662702610459531311216649072386140708028260298026544754165580825846066888627359398107646572509";
  "6970978822763433142826985686421339023287755479950762768483258980822039649860339441803266548833343746050218671112150742074381155744158937675714660045864310";
  "1739708111404722531740600772906287190945282471387048772599756905449693805598320296409243300918165007045320887126684129912583041485141001122512428256884334";
  "3358301928542975077048960270363164566703649988931947194451176219807785679787615651228751542077124845066985386719858191713819722141192826748583276438215303";
  "4770784277663247484574688025219456641086845761475411970633519380194336713767212045481064321135648873698567854295679471078284413182693483298054073594883076";
  "677122468859699133947968872864459291073328573287090040945851165561182563443782022804632353609247167644312833415275317538935541306838446869041313700370787";
  "5258710732386889091309115663048948127435950312596639961571652561528986444477665404133522228751127968557225736069752977486919888420901199527041509539081634";
  "2338797489451223305677596234828511421529993158839323509350038727392630009480507140906639693612377981912065167322994657161422225377352585431315684181086793";
  "5544054899455896772965727413830739785665268949506433612739762287526005106299179994226347831638239163487022957999702179946179640590871593982769398178040610";
  "3125076654221224829456328832863896258108801299923296102241454008220087669900363762366967364876368220625012223716716661020664470087724732435764521070681260";
  "467648237353710963210478302463952457368974814177334682991910387604300775619903806429882487277669070975819267771018786036162651771057771113501434694962519";
  "3456148870213932394874084052035724560037056961569200055790701109384346129526995975655546452431281348361464103652358767380793308060966367637985256757308022";
  "7051746219498430982758697042732875578579739287387330531826453864131474833528826516675032374499981326721626380561135212820858918483800641461734859666997961";
  "2413648615129584597416728300202645954216082770378766985369768318153372536435887516406032890155481785344243185589720122644708635853161781054146080550778950";
  "2186254677247791727058770211941511064566450531409157802034004543108227176438178499363406054348944651113797523185848244563007163742679017112582521231707553";
  "6348554036445128375176191520774406916758568720158080986249278336740878187149381364802216007182642396970467137985170950502579203731294246126942115037813286";
  "6682799337351030925170183799955044202201994520727368934871115360578870269375766444301226680821285131319801841239045371220114586634248104188405168777906928";
  "7121500413129826093997556926762249691551621473382788232036160443609746038139596440892970237388775677383881206861681066438835040414334843323131799140714401";
  "5983045480009655491109449385627726414510625223880125530467728336494259237152610236578923453518261163438900068114761838134077373026876444012740732148919591";
  "7366867245996650864037875730718908853808518102874987097600314986417709070055106856633178527855630064627514542635277295727848030787588872468315503347775730";
  "2111216495737349531858253905840700594148203975315064165335774405090973446364528925100153162136799131812267199896703867941960063765116794418589465505838781";
  "1337717152899070371321862405776446948494368879860520124087498010823539639491327646120976872092821493233495853821845000772293420056366150031736899286650510";
  "709475259421407300111957366661721782833702308736823677463781098290447924845125157977115063180867977860227867816956260041828630397866972031481086747815198";
  "1886323238154255485282181305822253614863433904633018546531088242017361236403294017283998290426999847668827431959228437633290080519009769398230164904923278";
  "302306563845650874297631822770628911554076238066742949631981619634044301337493727665285041657461324228878026852784922660500415538651988224084114977867827";
  "7295069477234760567315299416287320230483413992213248488417396665814484224453594200444686124847962159540159084088985762988468512867142578893768920141137084";
  "3750811569370658179697970244868355500314535543076695431627713776626013922938168918569026121577220906152120964593644440393026956756045527377368133100850058";
  "2684687624300169636927946540491920443475355199243238809317181509417395564496536141062721793695473694833090354781982523852587658380761960519923145145908110";
  "7980388572796275505512675999929772485257375564802313650188040620921806603488480805653860652442443965495516857899255284229161154752720517746364918303312959";
  "6850121779428032813221159312990553464554118959766996837549247439671003264006183185559478087228692638512219841470881870974538608390399234054849269188492816";
  "3286348414347658539687991741357416885921400369139749242181129417817137001132943882965296051818102880061235418183629362396250945834526469469955182414389324";
  "5086543264026631695697904783794227911409868613220400872734689498444006116643438597398015553175453445134508940303509960527193004190670442098277046845468947";
  "595547476484595240011235256139551516271014011502986210512037101642559101565607714044508931011199177471760984307016839937558871704669517085781575309685043";
  "4481273482229249471022502960799236989011259336537513755947120011842285251431087516604189941352757449663180200118453419855941451949215369703639054683849823";
  "6777768068005490651440595817375541667466847805498913866692549832576367765016629938813369875610297909243282809486185629793434770140792179614448946350060900";
  "899909083842647021954219562992644779444861784572390040398972105594620262783978181671240708773086198696344555200868707440481027405551355239048808943417700";
  "6668814989073086603158592966375096018107461873984864812347984834279818743810288398317173995272328012868736050554981340013080270226586638585356962949851058";
  "6648656612892121676060497092707195354516111214222054971391197670191470340001438428552476213129227065004945837732865562097352977775651913081286544683946226";
  "2786015456911755891091029495026734955248514962137948639024976316269825140757715395764430722822050797295264508540504544004378279796193772351423677904530878";
  "6460653627239566214118686049580389919561023738752332719913170040514420559051417424864044867386486716289618412327715168380062234947502156758332691086484686";
  "3708506974552575761663653597472599510340024483510986718208010596844848230535622155570707003482163913091958666561327686466881221195880341719992205539834098";
  "449274341899739209485406751814486672229136813771178716944516724006770514913490358401233108803587345591151465312484198506708857497572433232243033705211474";
  "7747425549593826931830090613155563672995163122351594747519012046233831130805563684025719597712516435685400285548453067213009327622589312138725003757845497";
  "4633033455941045936227693415360677327832308880160377642453049493790378278415889884390997531083010147035485563571006040022479878135137583886649322162730876";
  "5687918068886726980809308185674654228592328552391006527306462286153884958855644667617938264666148331771728219222418918295348241586838164353968545450295402";
  "704536446397905618731694201453313333220794462238339872635529502935816627518720489826000461661881824355742898532418409338876970955062507036770204931935935";
  "1840096081811058601480763297407723127385834950493496104011194881739339809534365210650946928362340554583234872763998117301066568781207071890923274613425082"] in
  
  let cFile = BatFile.open_in "PermutationCommitment01.json" in
  let cstring = BatIO.read_all cFile in
  let cjson = Yojson.Basic.from_string cstring in
  let clistjson = Yojson.Basic.Util.to_list cjson in
  let clist = toListOfElements clistjson in
  let c = toVectorNBig clist in (* PermutationCommitment01.json *)
  
  let tFile = BatFile.open_in "PoSCommitment01.json" in
  let tstring = BatIO.read_all tFile in
  let tjson = Yojson.Basic.from_string tstring in
  let tlistjson = Yojson.Basic.Util.to_list tjson in
  
  let cHatJson = List.nth tlistjson 0 in
  let t3Json = List.nth tlistjson 1 in
  let tHatJson = List.nth tlistjson 2 in
  let t1Json = List.nth tlistjson 3 in
  let t2Json = List.nth tlistjson 4 in
  let t4Json = List.nth tlistjson 5 in
  
  let cHatlistjson = Yojson.Basic.Util.to_list cHatJson in
  let cHatlist = toListOfElements cHatlistjson in
  let cHat = toVectorNBig cHatlist in
  
  let u = toVectorNString ["49964440712943942012241332230239226483129616590809179125936872319003088623925";
  "34498422718217623362205054529029401380959981060707433649221577095768461353190";
  "101528264680883843355819219226322546596916820810754531241434160828061679651074";
  "99569181517748047816940838085967086215791202475992804683872521968947984541024";
  "24280842707937630356043751315966212555726602150016169668546147136526588823820";
  "10445085260124285609939948735541977480427460759856238282618067712431549481765";
  "113289014530148156440420748175624697282373159802424253771937554464367503078246";
  "72607209279726268124430427641577103819291228867410768133636028858617648671750";
  "103394895239479427804528307554492229616304964159243538354569113118102637637701";
  "4160596371076247485988240278474253221361227232478770478512022089176682209616";
  "51451280267738375921387085067933788586844940322514518821906934406471471468156";
  "61734832603531883281761748911859086534576872781161763989018765627258669172778";
  "38508972178506035271646632781493754975608427950756010835467894345131196393178";
  "35294595705457334060044663600548252371518927382824948699529270832159780496127";
  "21879453285134834400843547909343166683525700368246499342587288570163581479134";
  "94774436375817880125044696922101223666434341048473339080754334853267817911909";
  "114272318189330703821123449631475024174739866897730688917446135593851424051274";
  "94077528511174086267891525895536854696440286077546472982245778437772848922118";
  "61493927380530306360191711964672490149141643297863841842780153387335459643393";
  "111598505058841975924881070634305333067849685475157686318286408111918785025754";
  "21531024921186294450808879045906791456289860908578964988980661352824721534162";
  "113997079773158918850077430935397460091999050927994289278066295205969598582293";
  "99231940845342084539497427810253144253349568249249063677069670510197082152321";
  "84055262663307303978855977127963589972979331369285026244104917534446532760862";
  "51317260284513100384531699990642636542386243449190617068550045238949513305481";
  "113651593963573636668967982086808014068920141124918025607070905909524921140795";
  "17604755598680231595483877492869377363856656232679247609280429317059628892836";
  "77773657453102726849004454208146918445703588245202367026052119158282822357173";
  "86340959870946692797975904367790742994145661299359186152922604493691882577370";
  "82466253299494275011129098136149121311966680368535206926099308278850986431855";
  "16893620247901908180777085605334013300273425261337702605291980406143853709762";
  "67476379889385900459549048029304279491014831967506531834679088030265399716998";
  "16606183074409716901848667417727867093803296566361748466276393286431584210053";
  "81488131107252795428714698302375614370000290827274545215631343544818094088127";
  "50863142515762677437760306038011554795463865289600893483079487489409150436815";
  "5640201071295518311912023626552924243619783452307743811951450958007594558429";
  "83498490751837533326553772109921908103250339276721706210982061432645422271880";
  "59355230368397404901309427776442864036033102233102638723216942410820821960272";
  "9099211965142880424152837090750809665999198482607821099164252868096545274678";
  "48996184670802716423974243175317935070450623214260725108016805258652054767889";
  "17583874540883988556996576860646552337885109092100783118520686848060887727380";
  "43089534573032599960453334918935024975021813442295934231470624056380314448864";
  "71618827697206885641977160051003553232130776632120918278806827157499219033336";
  "31361272821492215298379581583685084636700595304971476627322531192037529188683";
  "37327559769432442055015418402695747708523603232130634544188124963278579077879";
  "17064230328625491827747634952692186743184658395774598924281877910576310499248";
  "82677576536848589355485102724449006467890159623417273516991880041147646123103";
  "73072721324374486253974778338045304909991421647679504019115188069754984634846";
  "110286511194005696420925602274715863373558353902192492645733675317948414906563";
  "8903098418397670526423583047439347231464692126458866023143933965941451634679";
  "6094268591388962407922403361780797887130376129403326146429803636379516247729";
  "37119703749277090077897170999118805807707018957008762681820062922081018684720";
  "107307627393453300675910532917017899075466406236788455378685598097124273978404";
  "66592636454010351744377517352975549329364831884041845415357635771611789229141";
  "46419914764952389132902188567938771698835398141085451768486339104225440255536";
  "19613760433202309773779851157133199711229517781220297315888471786120864057046";
  "82353191074703152518001992829702182609925649810416153251670133182978570670422";
  "96493034054028140737490210726701828691856650032356345718425305849556345799355";
  "27145969034049440538847307360197762675750903374742970226034376329498239373446";
  "66004633639130177401615971385931400162246060627367215959361361141200224491582";
  "38536327614585326586099144865588152237799307896174547120278423017882317663553";
  "63149882916660159798762933599673654661425148147523836919395104841052956441118";
  "7788768928108508073336781092816403947583402762871519732674616876662809796043";
  "102749361403063357035465165705437054729649906357975332099082320251199234513752";
  "72912162476569609322167705316742365644519206167869418428177511767083717571263";
  "799269147779823473126951316491954311591875322028410517912477741319628545043";
  "88203474379086467040565561193214502121459294110344419408830808421057377436990";
  "6399011251360620516859210294557290090419441705271906670790301761615192259618";
  "55526456972347212069393570046771581265485701270469770004172745725751731708036";
  "26235517956200526598362047237627584311705921598956313764774392752607687911439";
  "58027633673647103053259635521082836267133685428728512599367997360777945485083";
  "41236133395307337680451648234321548718251135431580625274522054601470136068620";
  "107885400791781738340060659945474158881469146026389701316891878852961510399502";
  "89336222542877490902171247174790163604964439403668471466237909345730452305618";
  "98785779248868232790774489324235461233853706569075217186442192267957638616850";
  "66706113781879005238717610712926898982772045788238089716918892413960760530245";
  "112467928951455948237659658162725438475673290992184869877884488320717365640055";
  "53539926589477288506163083206889274390404515404641659009441157649581472585969";
  "9403345259729071325437375041355341027721423814006062183991972489162887682866";
  "4240150976292487058998714276285770350385741136295151094002738998564325083626";
  "72297414274024352341205039861257604485528612748720554190469979572877084707197";
  "9427170890412890901187871254764026913624864839225984090186740692052978897531";
  "108895522617109683997740605675024041782911772401015974038069255881535903293260";
  "12654453515329057772825262288096332749642746914959862040872095198971764359582";
  "88018517508610695896285872633125445962087156000574449800531908076880223946709";
  "12319472098725667660476673395025263162652555849673664272446052903218135595089";
  "5482134819187604011419399020152866875445271138941401750225522298355796247407";
  "99574423216394741308330030028778420783530257884988374162602992826125472011078";
  "2572095183902187790567130156224687436152351866004014048716507871074243069612";
  "58639381086240086505879282321646976586228970273395704029077022513335278582008";
  "42490149193685972204103270606853956570732361986231211692480515231415935379895";
  "100482150500171855765006214929616324177229468092182538507774910879811005960566";
  "96766035380267429767068250098233566933799038373119935358300240872723573060335";
  "56807593641185001025831311430026871840932697094909265074473644003901967018531";
  "57949953474375260470318736873476365197987287908587034708068555595857853289304";
  "52303671102185370462576773200716777528219490378731003520216261701919814839481";
  "58954908541797019608354757061770492982146090595610254946341741472137486878909";
  "46430247387707931608609557503372953115851398323163690384610853301333065360021";
  "75270434844099011023114558496614264897527716525789583809855490942035823342492";
  "10269623384256312088833913877374090218168275665074703421792722424300199392821"] in
  
  let cipherFile = BatFile.open_in "cleanCipher.json" in
  let ciphstring = BatIO.read_all cipherFile in
  let ciphjson = Yojson.Basic.from_string ciphstring in
  let ciphlistjson = Yojson.Basic.Util.to_list ciphjson in

  let ciphersA = Yojson.Basic.Util.to_list (List.nth ciphlistjson 0) in
  let ciphersB = Yojson.Basic.Util.to_list (List.nth ciphlistjson 1) in
  let ciphers = List.combine ciphersA ciphersB in
  
  let cipherOutFile = BatFile.open_in "Ciphertexts01.json" in
  let ciphOutstring = BatIO.read_all cipherOutFile in
  let ciphOutjson = Yojson.Basic.from_string ciphOutstring in
  let ciphOutlistjson = Yojson.Basic.Util.to_list ciphOutjson in

   let ciphersOutA = Yojson.Basic.Util.to_list (List.nth ciphOutlistjson 0) in
   let ciphersOutB = Yojson.Basic.Util.to_list (List.nth ciphOutlistjson 1) in
   let ciphersOut = List.combine ciphersOutA ciphersOutB in
  
  Format.printf "%s\n" "Json loaded";

  let e = toVectorNCiph ciphers in
  let e' = toVectorNCiph ciphersOut in

  Format.printf "%s\n" "Data loaded";

  Format.print_flush ();
  
  let statment = wikStatment pk h (Lib.hd h hs) hs c cHat u e e' in
  
  Format.printf "%s\n" "Statment Prepared";
  
  let rec toVectorNBaseJson = (fun i x ->
    match x with
    | [] -> Lib.Nil
    | z::zs ->
    Lib.Cons ((jsonToBigint z), i, (toVectorNBaseJson (Lib.pred i) zs))
  ) in
  
  (* Converts a list of strings to a vector of big_ints *)
  let toVectorNJson = (fun x ->
    toVectorNBaseJson (intToNat (List.length x)) x
  ) in
  
  let t1 = jsonToBigint t1Json in
  let t2 = jsonToBigint t2Json in
  let t3 = jsonToBigint t3Json in
  let t4prim = Yojson.Basic.Util.to_list t4Json in
  let t4 = (jsonToBigint (List.nth t4prim 0), jsonToBigint (List.nth t4prim 1)) in
  let tHat = toVectorNJson (Yojson.Basic.Util.to_list tHatJson) in
  
  let com = Obj.magic ((t1,t2),((t3,t4),tHat)) in
  
  Format.printf "%s\n" "Commitment Prepared";
  Format.print_flush ();
  
  let chal = Big_int.big_int_of_string "0x7db6dd518c66f5cff401e30e5e23cdabfe554a0f9552606bf955e9136c0db17c" in
  
  let sFile = BatFile.open_in "PoSReply01.json" in
  let sString = BatIO.read_all sFile in
  let sJson = Yojson.Basic.from_string sString in
  let sListjson = Yojson.Basic.Util.to_list sJson in
  
  let s3Json = List.nth sListjson 0 in
  let sHatJson = List.nth sListjson 1 in
  let s1Json = List.nth sListjson 2 in
  let s2Json = List.nth sListjson 3 in
  let sPrimeJson = List.nth sListjson 4 in
  let s4Json = List.nth sListjson 5 in
  
  Format.printf "%s\n" "Getting ready to pass response";
  Format.print_flush ();
  
  let s1 = jsonToBigint s1Json in
  let s2 = jsonToBigint s2Json in
  let s3 = jsonToBigint s3Json in
  let s4 = jsonToBigint s4Json in
  let sHat = toVectorNJson (Yojson.Basic.Util.to_list sHatJson) in
  let sPrime = toVectorNJson (Yojson.Basic.Util.to_list sPrimeJson) in
  
  let resp = Obj.magic ((s1, s2), (((sPrime, s3), s4), sHat))  in
  
  Format.printf "%s\n" "Transcript Prepared";
  Format.print_flush ();
  
  let result = wikSigma.coq_V1 (((statment, com), chal), resp) in
  
  Format.printf "%b\n" result;

    Format.print_flush ();
  
  Format.printf "%s\n" "All done";
